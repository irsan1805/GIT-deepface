# -*- coding: utf-8 -*-
"""updatefaiss.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KVf6hQUTHhoQVGyCStTisUjVGj22XifF
"""

pip install deepface

pip install faiss-gpu

pip install ultralytics

!git clone https://github.com/serengil/deepface.git

from deepface import DeepFace
import numpy as np
import os
import random
import faiss
import time
import matplotlib.pyplot as plt

model_name = "VGG-Face"
detector_backend = "yolov8"
num_dimensions = 4096

representations = []
for r, d, files in os.walk("deepface/tests/dataset"):
    for file in files:
        if ".jpg" in file:
            exact_file = f"{r}/{file}"
            objs = DeepFace.represent(
                img_path=exact_file,
                model_name=model_name,
                detector_backend=detector_backend
            )
            for obj in objs:
                embedding = obj["embedding"]
                representations.append([file, embedding])

for obj in objs:
                print(len(obj["embedding"]))

print(f"deepface unit test items have {len(representations)} images")

embeddings = []
for key, value in representations:
    embeddings.append(value)

tic = time.time()
index = faiss.IndexFlatL2(num_dimensions)
toc = time.time()
print(f"faiss instance is initialized in {toc-tic} seconds")

tic = time.time()
index.add(np.array(embeddings, dtype = "f"))
toc = time.time()
print(f"{len(embeddings)} vectors stored in faiss intance in {toc-tic} seconds")

target_path = "target.jpg"

target_img = DeepFace.extract_faces(
    img_path = target_path,
    detector_backend=detector_backend
)[0]["face"]
plt.imshow(target_img)
plt.axis("off")
plt.show()

target_embedding = DeepFace.represent(
    img_path=target_path,
    model_name=model_name,
    detector_backend=detector_backend
)[0]["embedding"]

target_embedding = np.array(target_embedding, dtype = "f")

target_embedding = np.expand_dims(target_embedding, axis = 0)

target_embedding.shape

k = 3
tic = time.time()
distances, neighbours = index.search(target_embedding, k)
toc = time.time()
print(f"search completed in {toc - tic} in seconds")

print(distances)

for idx, neighbour in enumerate(neighbours[0]):
    neighbour_name = representations[neighbour][0]

    neighbour_img = DeepFace.extract_faces(
        img_path=f"deepface/tests/dataset/{neighbour_name}",
        detector_backend=detector_backend
    )[0]["face"]

    print(f"{idx+1}th closest image in {len(embeddings)} database")
    fig = plt.figure(figsize=(7, 7))

    fig.add_subplot(1,2,1)
    plt.imshow(target_img)
    plt.axis("off")

    fig.add_subplot(1,2,2)
    plt.imshow(neighbour_img)
    plt.axis("off")

    plt.show()